<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Numerics;
using System.Windows.Media.Effects;

namespace Triangles.Helpers
{
	public static partial class VectorHelper
	{
<# 
		for(int i = 2; i < 5; i++)
		{
#>
		public static Vector<#= i #> Lerp(Vector<#= i #> a, Vector<#= i #> b, Vector<#= i #> c, float u, float v)
		{
			return a + u * (b - a) + v * (c - a);
		}

<#
		}
#>

<# 
		var chars = new[] {'X', 'Y', 'Z', 'W'};
		for(int i = 2; i < 4; i++)
		{
#>
		public static Vector<#= i+1 #> LerpHomogeneous(Vector<#= i #> a, Vector<#= i #> b, Vector<#= i #> c, float wa, float wb, float wc, float u, float v)
		{
			var aa = new Vector<#= i+1 #> (a / wa, 1 / wa);
			var bb = new Vector<#= i+1 #> (b / wb, 1 / wb);
			var cc = new Vector<#= i+1 #> (c / wc, 1 / wc);

			var vec = Lerp(aa, bb, cc, u, v);
			var vec<#= chars[i] #> = vec.<#= chars[i] #>;
			if(vec<#= chars[i] #> != 0) vec /= vec<#= chars[i] #>;
			vec.<#= chars[i] #> = vec<#= chars[i] #>;

			return vec;
		}

		public static Vector<#= i+1 #> LerpHomogeneous(Vector<#= i #> a, Vector<#= i #> b, Vector<#= i #> c, (float a, float b, float c, float u, float v) wAndUv)
		{
			return LerpHomogeneous(a, b, c, wAndUv.a, wAndUv.b, wAndUv.c, wAndUv.u, wAndUv.v);
		}

<#
		}
#>
	}
}
